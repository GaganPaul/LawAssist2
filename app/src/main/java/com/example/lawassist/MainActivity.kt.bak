// ... (rest of the code remains the same)

@Composable
fun ModernChatScreen(
    viewModel: LawViewModel,
    voiceViewModel: VoiceViewModel,
    userInputState: MutableState<String>,
    onVoiceInputRequested: () -> Unit,
    onVoiceInputStop: () -> Unit,
    navController: NavHostController,
    auth: FirebaseAuth,
    messages: MutableList<ChatMessage>,
    textToSpeechService: TextToSpeechService,
    onNewChat: () -> Unit,
    onDeleteAllChats: () -> Unit,
    settingsManager: SettingsManager
) {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current
    val aiResponse by viewModel.aiResponse
    val listState = rememberLazyListState()
    val coroutineScope = rememberCoroutineScope()
    
    // State for drawer
    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
    val scope = rememberCoroutineScope()

    // State for the text field
    var userInput by userInputState

    // Observe voice input status
    val isListening by voiceViewModel.isListening
    
    // State for text-to-speech
    var isSpeaking by remember { mutableStateOf(false) }
    
    // State for current chat title
    var currentChatTitle by remember { mutableStateOf("New Chat") }
    
    // Get font size from settings
    val currentFontSize by settingsManager.fontSize.collectAsState()
    
    // State for showing font size controls
    var showFontSizeControls by remember { mutableStateOf(false) }
    
    // Get selected model from settings
    val selectedModel by settingsManager.selectedModel.collectAsState()

    // Observe voice input results
    LaunchedEffect(voiceViewModel.voiceInputResult.value) {
        val result = voiceViewModel.voiceInputResult.value
        if (result.isNotEmpty()) {
            userInput = result
            voiceViewModel.clearVoiceInputResult()
        }
    }

    // Scroll to bottom when new message is added
    LaunchedEffect(messages.size) {
        if (messages.isNotEmpty()) {
            listState.animateScrollToItem(messages.size - 1)
        }
    }
    
    // Update speaking state
    LaunchedEffect(textToSpeechService.isSpeaking) {
        isSpeaking = textToSpeechService.isSpeaking
    }

    // Simpler approach to handle back button press
    val onBackPressedCallback = remember {
        object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                if (drawerState.isOpen) {
                    scope.launch {
                        drawerState.close()
                    }
                } else {
                    isEnabled = false
                    context.findActivity()?.onBackPressedDispatcher?.onBackPressed()
                    isEnabled = true
                }
            }
        }
    }
    
    // Register the callback
    DisposableEffect(Unit) {
        val activity = context.findActivity()
        activity?.onBackPressedDispatcher?.addCallback(onBackPressedCallback)
        onDispose {
            onBackPressedCallback.remove()
        }
    }

    ModalNavigationDrawer(
        drawerState = drawerState,
        drawerContent = {
            ModalDrawerSheet(
                modifier = Modifier.width(300.dp),
                drawerContainerColor = MaterialTheme.colorScheme.surface,
                drawerContentColor = MaterialTheme.colorScheme.onSurface
            ) {
                Spacer(modifier = Modifier.height(16.dp))
                
                // Drawer header
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Law Assist",
                        style = MaterialTheme.typography.titleLarge.copy(
                            fontWeight = FontWeight.Bold,
                            fontSize = MaterialTheme.typography.titleLarge.fontSize * currentFontSize
                        )
                    )
                }
                
                Divider()
                
                // New chat button
                ListItem(
                    headlineContent = {
                        Text(
                            "New Chat",
                            style = MaterialTheme.typography.bodyLarge.copy(
                                fontSize = MaterialTheme.typography.bodyLarge.fontSize * currentFontSize
                            )
                        )
                    },
                    leadingContent = {
                        Icon(
                            imageVector = Icons.Default.Add,
                            contentDescription = "New Chat"
                        )
                    },
                    modifier = Modifier.clickable {
                        onNewChat()
                        scope.launch {
                            drawerState.close()
                        }
                    }
                )
                
                // Settings button
                ListItem(
                    headlineContent = {
                        Text(
                            "Settings",
                            style = MaterialTheme.typography.bodyLarge.copy(
                                fontSize = MaterialTheme.typography.bodyLarge.fontSize * currentFontSize
                            )
                        )
                    },
                    leadingContent = {
                        Icon(
                            imageVector = Icons.Default.Settings,
                            contentDescription = "Settings"
                        )
                    },
                    modifier = Modifier.clickable {
                        navController.navigate("settings")
                        scope.launch {
                            drawerState.close()
                        }
                    }
                )
                
                Divider()
                
                // Logout button
                ListItem(
                    headlineContent = {
                        Text(
                            "Logout",
                            style = MaterialTheme.typography.bodyLarge.copy(
                                fontSize = MaterialTheme.typography.bodyLarge.fontSize * currentFontSize
                            )
                        )
                    },
                    leadingContent = {
                        Icon(
                            imageVector = Icons.Default.Logout,
                            contentDescription = "Logout"
                        )
                    },
                    modifier = Modifier.clickable {
                        auth.signOut()
                        navController.navigate("welcome") {
                            popUpTo(0)
                        }
                        Toast.makeText(context, "Logged out successfully", Toast.LENGTH_SHORT).show()
                    }
                )
            }
        }
    ) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = currentChatTitle,
                            style = MaterialTheme.typography.titleLarge.copy(
                                fontWeight = FontWeight.SemiBold,
                                fontSize = MaterialTheme.typography.titleLarge.fontSize * currentFontSize
                            )
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = { scope.launch { drawerState.open() } }) {
                            Icon(
                                imageVector = Icons.Default.Menu,
                                contentDescription = "Menu"
                            )
                        }
                    },
                    actions = {
                        // Font size controls toggle
                        IconButton(onClick = { showFontSizeControls = !showFontSizeControls }) {
                            Icon(
                                imageVector = Icons.Default.FormatSize,
                                contentDescription = "Font Size"
                            )
                        }
                        
                        // Model selection info
                        Box {
                            IconButton(onClick = { navController.navigate("settings") }) {
                                Icon(
                                    imageVector = Icons.Default.Info,
                                    contentDescription = "Model Info"
                                )
                            }
                            
                            Text(
                                text = selectedModel.split("-").firstOrNull() ?: "LLaMA",
                                style = MaterialTheme.typography.labelSmall,
                                modifier = Modifier
                                    .align(Alignment.BottomCenter)
                                    .padding(bottom = 4.dp)
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.surface,
                        titleContentColor = MaterialTheme.colorScheme.onSurface
                    )
                )
            },
            bottomBar = {
                Column {
                    // Font size controls
                    if (showFontSizeControls) {
                        Card(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 16.dp, vertical = 8.dp),
                            shape = RoundedCornerShape(16.dp),
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.surface
                            ),
                            elevation = CardDefaults.cardElevation(
                                defaultElevation = 2.dp
                            )
                        ) {
                            Row(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(8.dp),
                                verticalAlignment = Alignment.CenterVertically,
                                horizontalArrangement = Arrangement.SpaceBetween
                            ) {
                                IconButton(
                                    onClick = { 
                                        settingsManager.decreaseFontSize()
                                    },
                                    enabled = currentFontSize > SettingsManager.MIN_FONT_SIZE
                                ) {
                                    Icon(
                                        imageVector = Icons.Default.Remove,
                                        contentDescription = "Decrease font size",
                                        tint = if (currentFontSize > SettingsManager.MIN_FONT_SIZE) 
                                            MaterialTheme.colorScheme.primary 
                                        else 
                                            MaterialTheme.colorScheme.onSurface.copy(alpha = 0.3f)
                                    )
                                }
                                
                                Text(
                                    text = "Font Size: ${String.format("%.1f", currentFontSize)}x",
                                    style = MaterialTheme.typography.bodyMedium
                                )
                                
                                IconButton(
                                    onClick = { 
                                        settingsManager.increaseFontSize()
                                    },
                                    enabled = currentFontSize < SettingsManager.MAX_FONT_SIZE
                                ) {
                                    Icon(
                                        imageVector = Icons.Default.Add,
                                        contentDescription = "Increase font size",
                                        tint = if (currentFontSize < SettingsManager.MAX_FONT_SIZE) 
                                            MaterialTheme.colorScheme.primary 
                                        else 
                                            MaterialTheme.colorScheme.onSurface.copy(alpha = 0.3f)
                                    )
                                }
                            }
                        }
                    }
                    
                    // Chat input bar
                    ChatInputBar(
                        userInput = userInput,
                        onUserInputChange = { userInput = it },
                        onMessageSent = {
                            if (userInput.isNotBlank()) {
                                messages.add(
                                    ChatMessage(
                                        userId = "/users/${auth.currentUser?.uid}",
                                        role = "user",
                                        text = userInput,
                                        timestamp = System.currentTimeMillis()
                                    )
                                )
                                
                                // Save user message to Firestore
                                val userId = auth.currentUser?.uid
                                if (userId != null) {
                                    val chatMessage = hashMapOf(
                                        "userId" to "/users/$userId",
                                        "role" to "user",
                                        "text" to userInput,
                                        "timestamp" to Date()
                                    )
                                    
                                    FirebaseFirestore.getInstance().collection("chat_history")
                                        .add(chatMessage)
                                }
                                
                                // Query AI for response
                                coroutineScope.launch {
                                    try {
                                        val response = viewModel.queryGroqLlama(userInput, settingsManager.getSelectedModel())
                                        
                                        // Add AI response to messages
                                        messages.add(
                                            ChatMessage(
                                                userId = "/users/${auth.currentUser?.uid}",
                                                role = "assistant",
                                                text = response,
                                                timestamp = System.currentTimeMillis()
                                            )
                                        )
                                        
                                        // Save AI response to Firestore
                                        if (userId != null) {
                                            val aiMessage = hashMapOf(
                                                "userId" to "/users/$userId",
                                                "role" to "assistant",
                                                "text" to response,
                                                "timestamp" to Date()
                                            )
                                            
                                            FirebaseFirestore.getInstance().collection("chat_history")
                                                .add(aiMessage)
                                        }
                                    } catch (e: Exception) {
                                        // Show error message
                                        Toast.makeText(
                                            context,
                                            "Error: ${e.message}",
                                            Toast.LENGTH_SHORT
                                        ).show()
                                        
                                        // Add error message to chat
                                        messages.add(
                                            ChatMessage(
                                                userId = "/users/${auth.currentUser?.uid}",
                                                role = "assistant",
                                                text = "Sorry, I encountered an error. Please try again later.",
                                                timestamp = System.currentTimeMillis()
                                            )
                                        )
                                    }
                                }
                                
                                userInput = ""
                            }
                        },
                        onVoiceInputRequested = {
                            if (isListening) {
                                onVoiceInputStop()
                            } else {
                                onVoiceInputRequested()
                            }
                        },
                        isListening = isListening,
                        fontSize = currentFontSize
                    )
                }
            }
        ) { paddingValues ->
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues),
                state = listState,
                contentPadding = PaddingValues(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                items(messages) { message ->
                    ChatBubble(
                        message = message,
                        onSpeakClicked = { text ->
                            if (isSpeaking) {
                                textToSpeechService.stop()
                            } else {
                                textToSpeechService.speak(text)
                            }
                        },
                        isSpeaking = isSpeaking && message.role == "assistant",
                        fontSize = currentFontSize
                    )
                }
            }
        }
    }
}

// ... (rest of the code remains the same)